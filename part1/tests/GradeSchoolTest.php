<?php
/**
 * !! Note: Please Do not edit this file! This is to test your code. !!
 */
namespace Test;

use App\GradeSchool;
use PHPUnit\Framework\TestCase;

final class GradeSchoolTest extends TestCase
{
    private GradeSchool $gradeSchool;

    protected function setUp(): void
    {
        $this->gradeSchool = new GradeSchool();
    }

    /**
     * Test: A new school has an empty roster
     *
     * @return void
     */
    public function testNewSchoolHasEmptyRegister(): void
    {
        $this->assertTrue($this->gradeSchool->roster()->isEmpty());
    }

    /**
     * Test: Adding a student adds them to the roster for the given grade
     *
     * @return void
     */
    public function testAddStudentToGrade(): void
    {
        $this->gradeSchool->add('Aimee', 2);
        $expectedDb = [2 => ['Aimee']];

        $this->assertEquals($expectedDb, $this->gradeSchool->roster()->toArray());
    }

    /**
     * Test: Adding more students to the same grade adds them to the roster
     *
     * @return void
     */
    public function testAddMoreStudentsToSameGrade(): void
    {
        $this->gradeSchool->add('Blair', 2);
        $this->gradeSchool->add('James', 2);
        $this->gradeSchool->add('Paul', 2);

        $expectedDb = [2 => ['Blair', 'James', 'Paul']];
        $this->assertEquals($expectedDb, $this->gradeSchool->roster()->toArray());
    }

    /**
     * Test: Adding students to different grades adds them to the roster
     *
     * @return void
     */
    public function testAddStudentsToDifferentGrade(): void
    {
        $this->gradeSchool->add('Chelsea', 3);
        $this->gradeSchool->add('Logan', 7);

        $expectedDb = [3 => ['Chelsea'], 7 => ['Logan']];
        $this->assertEquals($expectedDb, $this->gradeSchool->roster()->toArray());
    }

    /**
     * Test: Grade returns the students in that grade in alphabetical order
     *
     * @return void
     */
    public function testGradeReturnsStudentsInAlphabeticalOrder(): void
    {
        $this->gradeSchool->add('Franklin', 5);
        $this->gradeSchool->add('Bradley', 5);
        $this->gradeSchool->add('Jeff', 1);

        $expectedStudents = ['Bradley', 'Franklin'];
        $this->assertEquals($expectedStudents, $this->gradeSchool->grade(5)->toArray());
    }

    /**
     * Test: Grade returns an empty array if there are no students in that grade
     * @return void
     */
    public function testGradeReturnsEmptyArrayIfNoStudents(): void
    {
        $this->assertTrue($this->gradeSchool->grade(1)->isEmpty());
    }

    /**
     * Test: The students names in each grade in the roster are sorted
     *
     * @return void
     */
    public function testGradeRosterIsSorted(): void
    {
        $this->gradeSchool->add('Jennifer', 4);
        $this->gradeSchool->add('Kareem', 6);
        $this->gradeSchool->add('Christopher', 4);
        $this->gradeSchool->add('Kyle', 3);

        $expectedSortedStudents = [
            3 => ['Kyle'],
            4 => ['Christopher', 'Jennifer'],
            6 => ['Kareem'],
        ];

        $this->assertEquals($expectedSortedStudents, $this->gradeSchool->roster()->toArray());
    }

}